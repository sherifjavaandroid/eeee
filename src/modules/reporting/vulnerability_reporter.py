import logging
import json
from typing import Dict, List, Any
from datetime import datetime
from pathlib import Path

class VulnerabilityReporter:
    def __init__(self):
        self.logger = logging.getLogger(__name__)

    def generate_vulnerability_report(self, vulnerabilities: List[Dict[str, Any]],
                                      output_format: str = 'json') -> str:
        """Generate vulnerability report in specified format"""
        if output_format.lower() == 'json':
            return self._generate_json_report(vulnerabilities)
        elif output_format.lower() == 'csv':
            return self._generate_csv_report(vulnerabilities)
        elif output_format.lower() == 'html':
            return self._generate_html_report(vulnerabilities)
        elif output_format.lower() == 'markdown':
            return self._generate_markdown_report(vulnerabilities)
        else:
            raise ValueError(f"Unsupported format: {output_format}")

    def _generate_json_report(self, vulnerabilities: List[Dict[str, Any]]) -> str:
        """Generate JSON report"""
        report = {
            'scan_date': datetime.now().isoformat(),
            'total_vulnerabilities': len(vulnerabilities),
            'severity_summary': self._get_severity_summary(vulnerabilities),
            'vulnerabilities': vulnerabilities
        }

        return json.dumps(report, indent=2)

    def _generate_csv_report(self, vulnerabilities: List[Dict[str, Any]]) -> str:
        """Generate CSV report"""
        import csv
        import io

        output = io.StringIO()
        fieldnames = ['id', 'type', 'severity', 'description', 'location',
                      'source', 'category', 'remediation']

        writer = csv.DictWriter(output, fieldnames=fieldnames)
        writer.writeheader()

        for vuln in vulnerabilities:
            row = {field: vuln.get(field, '') for field in fieldnames}
            writer.writerow(row)

        return output.getvalue()

    def _generate_html_report(self, vulnerabilities: List[Dict[str, Any]]) -> str:
        """Generate HTML report"""
        html = """
<!DOCTYPE html>
<html>
<head>
    <title>Vulnerability Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .vulnerability { border: 1px solid #ddd; margin: 10px 0; padding: 15px; }
        .severity-critical { border-left: 5px solid #d32f2f; }
        .severity-high { border-left: 5px solid #f44336; }
        .severity-medium { border-left: 5px solid #ff9800; }
        .severity-low { border-left: 5px solid #fdd835; }
        .summary { background: #f5f5f5; padding: 20px; margin-bottom: 30px; }
    </style>
</head>
<body>
    <h1>Vulnerability Report</h1>
    <div class="summary">
        <h2>Summary</h2>
        <p>Scan Date: {scan_date}</p>
        <p>Total Vulnerabilities: {total}</p>
        {severity_breakdown}
    </div>
    
    <h2>Vulnerabilities</h2>
    {vulnerabilities}
</body>
</html>
"""

        severity_summary = self._get_severity_summary(vulnerabilities)
        severity_breakdown = "<ul>"
        for severity, count in severity_summary.items():
            severity_breakdown += f"<li>{severity}: {count}</li>"
        severity_breakdown += "</ul>"

        vuln_html = ""
        for vuln in vulnerabilities:
            vuln_html += f"""
            <div class="vulnerability severity-{vuln.get('severity', 'low').lower()}">
                <h3>{vuln.get('type', 'Unknown')}</h3>
                <p><strong>Severity:</strong> {vuln.get('severity', 'Unknown')}</p>
                <p><strong>Description:</strong> {vuln.get('description', '')}</p>
                <p><strong>Location:</strong> {vuln.get('location', '')}</p>
                <p><strong>Category:</strong> {vuln.get('category', '')}</p>
            </div>
            """

        return html.format(
            scan_date=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            total=len(vulnerabilities),
            severity_breakdown=severity_breakdown,
            vulnerabilities=vuln_html
        )

    def _generate_markdown_report(self, vulnerabilities: List[Dict[str, Any]]) -> str:
        """Generate Markdown report"""
        md = f"""# Vulnerability Report

**Scan Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Total Vulnerabilities:** {len(vulnerabilities)}

## Severity Summary
"""

        severity_summary = self._get_severity_summary(vulnerabilities)
        for severity, count in severity_summary.items():
            md += f"- **{severity}:** {count}\n"

        md += "\n## Vulnerabilities\n\n"

        for i, vuln in enumerate(vulnerabilities, 1):
            md += f"""### {i}. {vuln.get('type', 'Unknown')}

**Severity:** {vuln.get('severity', 'Unknown')}  
**Description:** {vuln.get('description', '')}  
**Location:** {vuln.get('location', '')}  
**Category:** {vuln.get('category', '')}  

---

"""

        return md

    def _get_severity_summary(self, vulnerabilities: List[Dict[str, Any]]) -> Dict[str, int]:
        """Get severity summary"""
        summary = {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0}

        for vuln in vulnerabilities:
            severity = vuln.get('severity', 'Low')
            if severity in summary:
                summary[severity] += 1

        return summary

    def save_report(self, report_content: str, output_path: str, format: str):
        """Save report to file"""
        try:
            path = Path(output_path)
            path.parent.mkdir(parents=True, exist_ok=True)

            with open(path, 'w', encoding='utf-8') as f:
                f.write(report_content)

            self.logger.info(f"Report saved to {output_path}")
        except Exception as e:
            self.logger.error(f"Failed to save report: {e}")
            raise