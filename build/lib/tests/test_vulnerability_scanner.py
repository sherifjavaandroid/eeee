import unittest
import tempfile
import os
from pathlib import Path
from src.modules.static_analysis.vulnerability_scanner import VulnerabilityScanner

class TestVulnerabilityScanner(unittest.TestCase):
    def setUp(self):
        self.scanner = VulnerabilityScanner()
        self.temp_dir = tempfile.mkdtemp()

    def tearDown(self):
        import shutil
        shutil.rmtree(self.temp_dir)

    def test_sql_injection_detection(self):
        # Create a file with SQL injection vulnerability
        test_file = Path(self.temp_dir) / "test.java"
        with open(test_file, 'w') as f:
            f.write('''
            public void queryDatabase(String userInput) {
                String query = "SELECT * FROM users WHERE name = '" + userInput + "'";
                db.rawQuery(query);
            }
            ''')

        vulnerabilities = self.scanner.scan(Path(self.temp_dir))

        self.assertTrue(any(v['type'] == 'sql_injection' for v in vulnerabilities))

    def test_hardcoded_secret_detection(self):
        # Create a file with hardcoded secret
        test_file = Path(self.temp_dir) / "config.java"
        with open(test_file, 'w') as f:
            f.write('''
            public class Config {
                private static final String API_KEY = "sk_live_123456789abcdef";
                private static final String PASSWORD = "SuperSecretPassword123!";
            }
            ''')

        vulnerabilities = self.scanner.scan(Path(self.temp_dir))

        self.assertTrue(any(v['type'] == 'hardcoded_secrets' for v in vulnerabilities))

    def test_weak_crypto_detection(self):
        # Create a file with weak crypto
        test_file = Path(self.temp_dir) / "crypto.java"
        with open(test_file, 'w') as f:
            f.write('''
            public class Crypto {
                public String hashPassword(String password) {
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    return md.digest(password.getBytes());
                }
            }
            ''')

        vulnerabilities = self.scanner.scan(Path(self.temp_dir))

        self.assertTrue(any(v['type'] == 'weak_crypto' for v in vulnerabilities))

if __name__ == '__main__':
    unittest.main()